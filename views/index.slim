h1 AWS DynamoDB Task Management

markdown:
  This application is a demonstration of the use of [DynamoDB](http://aws.typepad.com/aws/2012/01/amazon-dynamodb-internet-scale-data-storage-the-nosql-way.html). It uses a custom ORM called DynamoRecord to access the database.

  The app is created using Ruby framework [Sinatra](http://sinatrarb.com) and the source code is available on [GitHub](https://github.com/darthdeus/dynamorecord). The layout is done using [Twitter Bootstrap framework](http://twitter.github.com/bootstrap) and is backed up by some jQuery for all the AJAXy stuff.

  The ORM itself has a decent test coverage using RSpec and excercises basic functionality of DynamoDB. IDs are generated via the [UUIDTools](https://github.com/sporkmonger/uuidtools/tree/) gem. Main idea was to get at least some of the ActiveRecord-ish API to DynamoDB using some basic metaprogramming.
  
  Tasks have two attributes, name, which is strored in a string, and tags, which are split by `,` and stored in an array.

  If the application stops responding, refresh the page. There might be an issue with internet connectivity.

h2 Your current tasks

table.zebra-striped.tasks
  thead
    tr
      th Name
      th Tags
      th Actions
  tbody
    tr.task id="first_father" style="display: none !important;"
      td.name
      td.tags

      td.buttons
        button type="submit" class="edit btn" Edit      
        button type="submit" class="delete btn danger" Delete

    - @tasks.each do |task|
      tr.task id="task#{task.attributes['id'].to_s.sub('.', '_')}"
        td.name= task.attributes['name']
        td.tags= [*task.attributes['tags']].join(", ")

        td.buttons
          button type="submit" class="edit btn" Edit      
          button type="submit" class="delete btn danger" Delete



h2 Add a new task

form.form-stacked method="post" action="/"
  input type="hidden" id="task_id"

  .clearfix
    label for="name" Name
    .input
      input type="text" name="name" id="name"

  .clearfix
    label for="tags" Tags
    .input
      input type="text" name="tags" id="tags"
      span.help-block Tags are separated by comma and stored as an array

  .actions
    button type="submit" class="btn primary update" Update task
    button type="submit" class="btn primary create" Add a new task